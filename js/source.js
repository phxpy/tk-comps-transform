const posthtml = require('posthtml');
const minifier = require('posthtml-minifier');

const postcss = require("postcss");
const autoprefixer = require("autoprefixer");
const csso = require('csso');
const scopify = require('postcss-scopify');

const uglifyJS = require("./uglify");

const sources = Array.from(document.querySelectorAll(".source"));
const resultTxa = document.querySelector(".result");
const resetBtn = document.querySelector(".reset-btn");

const browserslist = ["defaults", "not dead", "last 10 versions"]
const regex = /<[a-zA-Z]+(>|.*?[^?]>)/gi
let uniqueDataAttr = generateUniqueDataAttr();

document.querySelector(".browserslist").textContent = `CSS: ${browserslist.join(", ")}`;

let comp = {}

resetBtn.addEventListener("click", () => {
    sources.forEach(source => {
        source.value = "";
    })
    resultTxa.value = "";
    comp = {}
    uniqueDataAttr = generateUniqueDataAttr();
})

sources.forEach(source => {
    source.addEventListener("input", e => {
        parseCode(source)
    })

    source.addEventListener("paste", e => {
        e.preventDefault();

        const pastedText = (e.clipboardData || window.clipboardData).getData('text');
        source.value = pastedText;

        parseCode(source)
    })
})

function parseCode(source) {
    if (source.id === "txa-html") {

        // HTML minifier

        posthtml()
            .use(minifier({
                collapseWhitespace: true,
                removeComments: true,
                includeAutoGeneratedTags: false,
                keepClosingSlash: true
            }))
            .process(source.value)
            .then(function (result) {
                const scopedHtml = result.html.replaceAll(regex, match => {
                    if (match.endsWith("/>")) {
                        return `${match.slice(0, -2)} data-${uniqueDataAttr}/>`;
                    } else {
                        return `${match.slice(0, -1)} data-${uniqueDataAttr}>`;
                    }
                });
                comp["html"] = scopedHtml
                resultTxa.value = JSON.stringify(comp, null, 4);
            })
            .catch(function (error) {
                console.error("Bullshit! Not valid HTML! ðŸ’©");
            });

    } else if (source.id === "txa-css") {

        // CSS minifier and autoprefixer

        postcss([
            autoprefixer({ overrideBrowserslist: browserslist }),
            scopify('#scope')
        ]).process(source.value, { from: undefined }).then(result => {
            comp["css"] = csso.minify(result.css, { restructure: false }).css
            resultTxa.value = JSON.stringify(comp, null, 4);
        })
        .catch(error => {
            console.error("Bullshit! Not valid CSS! ðŸ’©");
        })

    } else if (source.id === "txa-js") {

        // JS minifier

        const result = uglifyJS.minify(source.value);
        if (!result.error) {
            comp["js"] = result.code
            resultTxa.value = JSON.stringify(comp, null, 4);
        } else {
            console.error("Bullshit! Not valid JS! ðŸ’©");
        }
    }
}

resultTxa.addEventListener("click", () => {
    navigator.clipboard.writeText(resultTxa.value);

    const span = document.createElement("span");
    span.classList.add("copied-msg");
    span.textContent = "Copied to clipboard";

    resultTxa.parentElement.appendChild(span);

    setTimeout(() => {
        resultTxa.parentElement.removeChild(span);
    }, 2000)
})

function generateUniqueDataAttr() {
    const characters = "abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
    let uniqueDataAttr = "tk-";

    for (let i = 0; i < 6; i++) {
        const randomIndex = Math.floor(Math.random() * characters.length);
        uniqueDataAttr += characters.charAt(randomIndex);
    }

    return uniqueDataAttr;
}
